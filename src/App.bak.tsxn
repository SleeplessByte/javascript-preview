import React, {
  useEffect,
  useRef,
  RefObject,
  useState,
  useCallback,
  Fragment,
} from 'react'
import './App.css'

import MonacoEditor, {
  EditorDidMount,
  ChangeHandler,
} from 'react-monaco-editor'
import {
  StoredMemoryValue,
  useMemoryValue,
  useMutableMemoryValue,
} from './state/state'

import ReactMarkdown from 'react-markdown'

interface EditorProps {
  language: EditorLanguage
  codeRef: RefObject<string | null>
  onCodeUpdated(code: string): void
}

type Track = 'javascript' | 'typescript'
type EditorLanguage = Track

function trackToEditorLanguage(track: Track): EditorLanguage {
  return track
}

class Editor extends React.Component<EditorProps, { code: string }> {
  constructor(props: EditorProps) {
    super(props)
    this.state = {
      code: props.codeRef.current || '// type your code...\n',
    }

    this.onChange = this.onChange.bind(this)
  }

  editorDidMount(
    editor: Parameters<EditorDidMount>[0],
    monaco: Parameters<EditorDidMount>[1]
  ) {
    editor.focus()
    editor.setPosition({ lineNumber: 2, column: 1 })
  }

  onChange(
    newValue: Parameters<ChangeHandler>[0],
    e: Parameters<ChangeHandler>[1]
  ) {
    //
    this.props.onCodeUpdated(newValue)
  }

  render() {
    const code = this.state.code

    const options = {
      selectOnLineNumbers: true,
      glyphMargin: true,
      fontLigatures: true,
      automaticLayout: true,
    }

    return (
      <MonacoEditor
        language={this.props.language}
        theme="vs-dark"
        defaultValue={code}
        options={options}
        onChange={this.onChange}
        editorDidMount={this.editorDidMount}
      />
    )
  }
}

interface UserSession {
  code: string
  track: Track
  combinedSlug: string
  version: number
}

interface CurrentExercise {
  slug: string
  track: Track
  code: string
  introduction: string
  instructions: string
  hints: string
  tests: string
}

const USER_SESSION = new StoredMemoryValue<UserSession>('session')
const EXERCISE = new StoredMemoryValue<CurrentExercise & { timestamp: number }>(
  'exercise'
)
const CONFIG = new StoredMemoryValue<
  Configuration & { timestamp: number; track: Track }
>('config.json')


function useCurrentExercise(
  combinedSlug: string,
  track: Track
): CurrentExercise | null {
  const { current: exercise, set: setExercise } = useMutableMemoryValue(
    EXERCISE
  )
  const [type, slug] = combinedSlug.split('/')

  if (!slug) {
    throw new Error(`Pass in concept/slug or practice/slug. Given: ${type}`)
  }

  useEffect(() => {
    const timestamp = new Date().getTime()
    const controller = new AbortController()
    const { signal } = controller

    Promise.all([
      fetch(
        `https://raw.githubusercontent.com/exercism/${track}/main/exercises/${type}/${slug}/${slug}.${SOURCE_EXT[track]}`,
        { signal }
      ).then((response) => response.text()),
      fetch(
        `https://raw.githubusercontent.com/exercism/${track}/main/exercises/${type}/${slug}/${slug}.${TESTS_EXT[track]}`,
        { signal }
      ).then((response) => response.text()),
      fetch(
        `https://raw.githubusercontent.com/exercism/${track}/main/exercises/${type}/${slug}/.docs/introduction.md`,
        { signal }
      ).then((response) => response.text()),
      fetch(
        `https://raw.githubusercontent.com/exercism/${track}/main/exercises/${type}/${slug}/.docs/instructions.md`,
        { signal }
      ).then((response) => response.text()),
      fetch(
        `https://raw.githubusercontent.com/exercism/${track}/main/exercises/${type}/${slug}/.docs/hints.md`,
        { signal }
      ).then((response) => response.text()),
    ])
      .then(([code, tests, introduction, instructions, hints]) =>
        setExercise({
          slug: `${type}/${slug}`,
          code,
          introduction,
          instructions,
          hints,
          track,
          tests,
          timestamp,
        })
      )
      .catch(console.error)

    return () => {
      controller.abort()
    }
  }, [type, slug, track, setExercise])

  if (exercise && exercise.slug === combinedSlug && exercise.track === track) {
    return exercise
  }

  return null
}

function BrowserNotSupported() {
  return (
    <main>
      Your Browser does not support <code>AbortController</code>. Please upgrade
      to <a href="https://caniuse.com/#feat=abortcontroller">one that does</a>.
    </main>
  )
}

function Spinner() {
  return <div className="spinner" />
}

function Loading() {
  return (
    <main>
      <Spinner />
    </main>
  )
}

function App() {
  const value = useMemoryValue(USER_SESSION)

  if (!('AbortController' in window)) {
    return <BrowserNotSupported />
  }

  if (value === undefined) {
    return <Loading />
  }

  if (!value || !value.combinedSlug) {
    return <PickExercise track={value?.track || 'javascript'} />
  }

  return <Exercise track={value.track} slug={value.combinedSlug} />
}

function PickExercise({ track }: { track: Track }) {
  const { current: config, set: setConfig } = useMutableMemoryValue(CONFIG)
  const { current: session, set: setSession } = useMutableMemoryValue(
    USER_SESSION
  )

  useEffect(() => {
    // Still fetching from memory or storage
    if (config === undefined) {
      return
    }

    const timestamp = new Date().getTime()

    // If previously fetched in the past hour
    if (
      config &&
      config.track === track &&
      timestamp - config.timestamp < 3600
    ) {
      return
    }

    const controller = new AbortController()
    const { signal } = controller

    fetch(
      `https://raw.githubusercontent.com/exercism/${track}/main/config.json`,
      { signal }
    )
      .then((response) => response.json())
      .then((response) => setConfig({ ...response, timestamp, track }))

    return () => {
      controller.abort()
    }
  }, [track, config, setConfig])

  const setExercise = useCallback(
    (type: string, slug: string) => {
      setSession({
        code: '',
        version: 1,
        ...(session || {}),
        track,
        combinedSlug: `${type}/${slug}`,
      })
    },
    [session, setSession, track]
  )

  if (!config) {
    return <Loading />
  }

  return (
    <main>
      <header>
        <h1>{track}</h1>
      </header>

      <h2>Concepts</h2>
      <ul>
        {config.exercises.concept.map((exercise) => (
          <li key={exercise.uuid}>
            <button onClick={() => setExercise('concept', exercise.slug)}>
              {exercise.slug}
            </button>
          </li>
        ))}
      </ul>

      <footer>
        This is a playground for the V3 {track} track. Not all functions might
        be working properly; it's just a playground that allows you to test
        exercises in the browser, without installing anything. At this time
        you need a <i>modern</i> browser. You can only store one exercise at
        the same time (this will change), so when you press "back" in the
        bottom right corner, you'll lose all code. Feel free to navigate away.
      </footer>
    </main>
  )
}

function Exercise({ track, slug }: { track: Track; slug: string }) {
  const { set: setSession, current: session } = useMutableMemoryValue(
    USER_SESSION
  )
  const exercise = useCurrentExercise(slug, track)
  const code = useRef<string | null>(null)

  const updateValue = useCallback(
    (code: string) => {
      setSession({ version: 1, combinedSlug: slug, track, code })
    },
    [setSession, slug, track]
  )

  const back = () => {
    session && setSession({ ...session, combinedSlug: '', code: '' })
  }

  if (exercise === null || session === undefined) {
    return <Loading />
  }

  // Use a ref so that re-renders do NOT trigger a re-render of the editor.
  // We only care about this value the first time it is resolved. After the
  // first render, useMemoryValue will emit all updates.
  code.current = session?.code || exercise?.code || null

  return (
    <main
      style={{
        backgroundColor: '#f5f5f5',
        width: '100vw',
        height: '100%',
        overflow: 'hidden',
        position: 'relative',
      }}
    >
      <Editor
        language="javascript"
        codeRef={code as RefObject<string | null>}
        onCodeUpdated={updateValue}
      />

      <Actions exercise={exercise} back={back} />
    </main>
  )
}

function Actions({
  exercise,
  back,
}: {
  back(): void
  exercise: CurrentExercise
}) {
  const ref = useRef()

  const [activePopup, setActivePopup] = useState<
    'doc' | 'hint' | 'after' | 'runner' | false
  >(false)

  useEffect(() => {
    const hide = (e: MouseEvent) => {
      if (e.target) {
        if ('closest' in e.target) {
          if (
            (e.target as HTMLElement).closest('#popup') ||
            (e.target as HTMLElement).closest('#actions')
          ) {
            return
          }
        }
      }

      console.log(e)
      setActivePopup(false)
    }

    document.addEventListener('click', hide)

    return () => {
      document.removeEventListener('click', hide)
    }
  })

  return (
    <Fragment>
      <div
        id="actions"
        style={{
          position: 'absolute',
          right: 32,
          bottom: 32,
          padding: 8,
          boxShadow:
            '0 14px 28px rgba(0,0,0,0.25), 0 10px 10px rgba(0,0,0,0.22)',
          backgroundColor: 'rgba(255, 255, 255, .8)',
          backdropFilter: 'blur(2px)',
        }}
      >
        <button
          onClick={() => setActivePopup('doc')}
          style={{
            padding: 4,
            appearance: 'none',
            background: 0,
            border: 0,
            marginRight: 4,
            width: 48,
            height: 48,
          }}
        >
          <svg style={{ width: 24, height: 24 }} viewBox="0 0 24 24">
            <path
              fill="currentColor"
              d="M3,5H9V11H3V5M5,7V9H7V7H5M11,7H21V9H11V7M11,15H21V17H11V15M5,20L1.5,16.5L2.91,15.09L5,17.17L9.59,12.59L11,14L5,20Z"
            />
          </svg>
        </button>
        <button
          onClick={() => setActivePopup('hint')}
          style={{
            padding: 4,
            appearance: 'none',
            background: 0,
            border: 0,
            marginRight: 4,
            width: 48,
            height: 48,
          }}
        >
          <svg style={{ width: 24, height: 24 }} viewBox="0 0 24 24">
            <path
              fill="currentColor"
              d="M21.5,10.8L13.2,2.5C12.5,1.8 11.5,1.8 10.8,2.5L2.5,10.8C1.8,11.5 1.8,12.5 2.5,13.2L10.8,21.5C11.5,22.2 12.5,22.2 13.2,21.5L21.5,13.2C22.1,12.5 22.1,11.5 21.5,10.8M12.5,17H11V15.5H12.5V17M14.3,11.8C13.9,12.3 13.2,12.6 12.9,13.1C12.6,13.5 12.6,14 12.6,14.5H11C11,13.7 11,13 11.3,12.5C11.6,12 12.3,11.7 12.7,11.4C13.9,10.3 13.6,8.7 11.9,8.6C11.1,8.6 10.4,9.3 10.4,10.1H9C9,8.4 10.3,7.1 12,7.1C14.7,7.1 15.9,9.8 14.3,11.8Z"
            />
          </svg>
        </button>
        <button
          style={{
            padding: 4,
            appearance: 'none',
            background: 0,
            border: 0,
            marginRight: 4,
            width: 48,
            height: 48,
          }}
          onClick={() => setActivePopup('runner')}
        >
          <svg style={{ width: 24, height: 24 }} viewBox="0 0 24 24">
            <path
              fill="currentColor"
              d="M10,16.5V7.5L16,12M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2Z"
            />
          </svg>
        </button>

        <button
          style={{
            padding: 4,
            appearance: 'none',
            background: 0,
            border: 0,
            width: 48,
            height: 48,
          }}
          onClick={back}
        >
          <svg style={{ width: 24, height: 24 }} viewBox="0 0 24 24">
            <path
              fill="currentColor"
              d="M5,13L9,17L7.6,18.42L1.18,12L7.6,5.58L9,7L5,11H21V13H5M21,6V8H11V6H21M21,16V18H11V16H21Z"
            />
          </svg>
        </button>
      </div>
      {activePopup === 'doc' && <DocPopup exercise={exercise} />}
      {activePopup === 'hint' && <HintPopup exercise={exercise} />}
      {activePopup === 'runner' && <TestRunnerPopup exercise={exercise} />}
    </Fragment>
  )
}

function runTests() {
  const exercise = EXERCISE.current
  const session = USER_SESSION.current

  if (!exercise || !exercise.tests || !session || !session.code) {
    console.error('not ready', { exercise, session })
    return Promise.resolve({ failed: 1, message: 'write some code first' })
  }

  const code = prepareTest(
    exercise.tests,
    session.code,
    session.combinedSlug.split('/')[1]
  )

  return import(/* webpackIgnore: true */ `${code}`)
    .then((result) => {
      console.info(result)
      console.info(result.run)
      return result.run
    })
    .catch((error) => {
      console.error('ERROR WHILST RUNNING TEST', error, code)
      return { failed: 1, message: error.message }
    })
}

function DocPopup({ exercise }: { exercise: CurrentExercise }) {
  return (
    <article
      id="popup"
      style={{
        position: 'fixed',
        top: 32,
        left: 32,
        right: 32,
        bottom: 32,
        overflow: 'auto',
        margin: 'auto',
        padding: 32,
        maxWidth: '720px',
        maxHeight: '400px',
        boxShadow: '0 14px 28px rgba(0,0,0,0.25), 0 10px 10px rgba(0,0,0,0.22)',
        backgroundColor: 'rgba(255, 255, 255, 1)',
        //backdropFilter: 'blur(2px)',
      }}
    >
      <header>
        <h1>{exercise.slug}</h1>
        <ReactMarkdown source={exercise.introduction} />
      </header>
      <section>
        <h2>Instructions</h2>
        <ReactMarkdown source={exercise.instructions} />
      </section>
    </article>
  )
}

function HintPopup({ exercise }: { exercise: CurrentExercise }) {
  return (
    <article
      id="popup"
      style={{
        position: 'fixed',
        top: 32,
        left: 32,
        right: 32,
        bottom: 32,
        overflow: 'auto',
        margin: 'auto',
        padding: 32,
        maxWidth: '600px',
        maxHeight: '400px',
        boxShadow: '0 14px 28px rgba(0,0,0,0.25), 0 10px 10px rgba(0,0,0,0.22)',
        backgroundColor: 'rgba(255, 255, 255, 1)',
        // backdropFilter: 'blur(2px)',
      }}
    >
      <header>
        <h2>Hints</h2>
      </header>
      <section>
        <ReactMarkdown source={exercise.hints} />
      </section>
    </article>
  )
}

function TestRunnerPopup({ exercise }: { exercise: CurrentExercise }) {
  const [results, setResults] = useState<any>()

  useEffect(() => {
    runTests().then(setResults)
  }, [])

  useEffect(() => {
    if (results && results.promises && results.promises.length) {
      const { promises, ...otherResults } = results

      Promise.all(promises)
        .finally(() => setResults({ ...otherResults }))
    }
  }, [results])

  return (
    <article
      id="popup"
      style={{
        position: 'fixed',
        top: 32,
        left: 32,
        right: 32,
        bottom: 32,
        overflow: 'auto',
        margin: 'auto',
        padding: 32,
        maxWidth: '600px',
        maxHeight: '400px',
        boxShadow: '0 14px 28px rgba(0,0,0,0.25), 0 10px 10px rgba(0,0,0,0.22)',
        backgroundColor: 'rgba(255, 255, 255, 1)',
        // backdropFilter: 'blur(2px)',
      }}
    >
      <header>
        <h2>Tests</h2>
      </header>
      <section>
        <pre>
          <code style={{ fontSize: 11 }}>
            {JSON.stringify(results || '⏳', undefined, 2)
              .replace(/passed/g, '✅ passed')
              .replace(/failed/g, '💥 failed')}
          </code>
        </pre>
      </section>
    </article>
  )
}

function convert(code: string) {
  try {
    return (
      'data:text/javascript;base64,' +
      btoa(code.replace(/’/g, '').replace(/‘/g, ''))
    )
  } catch (err) {
    if (err instanceof DOMException) {
      for (let c of code) {
        if (c.charCodeAt(0) >= 255 || !Number.isNaN(c.charCodeAt(1))) {
          console.warn('not 0-254 in code: ', c)
        }
      }

      console.warn(code)

      return 'data:text/javascript;charset=utf-8,' + encodeURIComponent(code)
    }
  }
}

function prepareTest(tests: string, code: string, slug: string) {
  const testHelper = `
  const run = {
    failed: 0,
    skipped: 0,
    passed: 0,
    messages: [],
    promises: []
  }

  async function test(name, c,) {
    if (run.failed > 0) {
      run.skipped += 1
      return
    }

    try {
      console.log(name, await c())
      run.messages.push({ test: name, message: 'passed' })
      run.passed += 1
    } catch (err) {
      console.error(name, err)
      run.messages.push({ test: name, message: 'failed', err: err.message })
      run.failed += 1
    }
  }

  const xtest = test
  const it = test
  const xit = test

  async function describe(name, c) {
    console.log("running tests", name)
    return await c()
  }

  function expect(value) {
    return {
      resolves: {
        toBe(x) {
          const p = value.then(
            (resolved) => {
              if (x !== resolved) {
                throw new Error(\`Expected \${JSON.stringify(resolved, undefined, 2)} to be \${x}\`)
              }
            }
          )

          run.promises.push(p)
          return p
        }
      },
      rejects: {
        toThrow(x) {
          const p = value.then(
            () => {
              throw new Error(\`Expected error \${x}\`)
            },
            (err) => { /* */ }
          )
          run.promises.push(p)
          return p
        }
      },
      toBeCloseTo(x, y = 0.01) {
        if (Math.abs(value - x) <= y) {
          return true
        }

        throw new Error(\`Expected \${value} to be close to \${x}\`)
      },
      toBe(x) {
        if (x !== value) {
          throw new Error(\`Expected \${value} to be \${x}\`)
        }
      },
      toEqual(x) {
        if (x != value) {
          throw new Error(\`Expected \${value} to equal \${x}\`)
        }
      }
    }
  }

  export { run }
  `

  const lines = tests
    .replace(`'./${slug}'`, `'${convert(code)}'`)
    .replace(`"./${slug}"`, `'${convert(code)}'`)
    .split('\n')
  lines.splice(
    lines.findIndex((l) => l.indexOf('from ') !== -1) + 1,
    0,
    testHelper
  )
  return convert(lines.join('\n'))
}

// https://github.com/exercism/v3/blob/master/languages/javascript/config.json
// https://raw.githubusercontent.com/exercism/v3/master/languages/javascript/config.json

export default App
